webpackJsonp([1],{221:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function l(e){return r.default.createElement(g.default,{iconButtonElement:r.default.createElement(v.default,null,r.default.createElement(k.default,{className:"submenu-svg",style:{color:"white",fill:"white"}})),targetOrigin:{horizontal:"right",vertical:"top"},anchorOrigin:{horizontal:"right",vertical:"top"}},r.default.createElement(m.default,{primaryText:"Cerrar sesion",onClick:e.onLogout}))}Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(o),u=n(57),i=n(166),s=a(i),d=n(168),c=a(d),f=n(172),m=a(f),h=n(180),p=(a(h),n(169)),g=a(p),E=n(67),v=a(E),w=n(181),k=a(w);l.muiName="IconMenu";var y=r.default.createClass({displayName:"ShopBackofficeBar",getInitialState:function(){return{drawerOpen:!1}},getDefaultProps:function(){return{onLogout:function(){}}},closeDrawer:function(){this.setState({drawerOpen:!1})},toggleDrawer:function(){var e=!this.state.drawerOpen;this.setState({drawerOpen:e})},render:function(){var e=this;return r.default.createElement("div",null,r.default.createElement(s.default,{onLeftIconButtonTouchTap:this.toggleDrawer,iconElementRight:r.default.createElement(l,{onLogout:this.props.onLogout}),title:"Administracion comercio"}),r.default.createElement(c.default,{open:this.state.drawerOpen,docked:!1,onRequestChange:function(t){return e.setState({drawerOpen:t})}},r.default.createElement(u.Link,{to:"/index",onClick:this.closeDrawer},r.default.createElement(m.default,null,"Principal"))))}});t.default=y},224:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=n(0),l=function(e){return e&&e.__esModule?e:{default:e}}(a),o=l.default.createClass({displayName:"ShopadmIndex",render:function(){return l.default.createElement("div",{className:"with-margin index"},l.default.createElement("h1",null,"Administracion de comercio"),l.default.createElement("h2",null,"Configuracion y estadisticas"),l.default.createElement("p",null,"Desde aqui es posible actualizar el menu y obtener estadisticas de los pedidos mensuales."))}});t.default=o},225:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var l=n(0),o=a(l),r=n(31),u=a(r),i=n(68),s=(a(i),n(69)),d=a(s),c=n(66),f=n(39),m=a(f),h=n(36),p=a(h),g=n(73),E=a(g),v=function(){},w=o.default.createClass({displayName:"ShopadmLogin",getInitialState:function(){return{username:"",password:"",errMsg:null}},getDefaultProps:function(){return{onSubmit:v}},submitForm:function(){var e=this,t=this.state.username,n=this.state.password,a=btoa(t+":"+n);(0,p.default)({method:"post",url:"/api/v1/shopadm/login",headers:{Authorization:"Basic "+a}}).then(function(t){console.log("Contenido:"),console.log(t.data),e.props.onSubmit(t.data.token)}).catch(function(t){console.error(t),e.setState({errMsg:"Credenciales invalidas"})})},handleKeyPress:function(e){"Enter"==e.key&&this.submitForm()},render:function(){var e=this,t=this.state.errMsg?o.default.createElement("p",{style:{color:"red"}},this.state.errMsg):o.default.createElement("div",null);return o.default.createElement("div",{onKeyPress:this.handleKeyPress},o.default.createElement(E.default,{title:"Administracion comercio"}),t,o.default.createElement(u.default,null,o.default.createElement(c.Card,null,o.default.createElement(c.CardHeader,{title:"Iniciar sesion",subtitle:"Ingrese credenciales"}),";",o.default.createElement(c.CardText,{expandable:!1},o.default.createElement(d.default,{name:"username",hint:"username",floatingLabelText:"username",value:this.state.username,onChange:function(t){return e.setState({username:t.target.value})}}),o.default.createElement("br",null),o.default.createElement(d.default,{name:"password",hintText:"Password",floatingLabelText:"Password",type:"password",value:this.state.password,onChange:function(t){return e.setState({password:t.target.value})}}),o.default.createElement("br",null)),o.default.createElement(c.CardActions,null,o.default.createElement(m.default,{label:"Iniciar sesion",onClick:this.submitForm})))))}});t.default=w},245:function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var l=n(0),o=a(l),r=n(17),u=a(r),i=n(57),s=n(31),d=a(s),c=n(36),f=a(c),m=n(221),h=a(m),p=n(224),g=a(p),E=n(225),v=a(E);(0,a(n(86)).default)(),console.log("Parseando cookie "+document.cookie);var w=document.cookie||"",k=w.split("; ").find(function(e){return e.startsWith("token=")}),y=k?k.replace("token=",""):null,b=o.default.createClass({displayName:"ShopBackoffice",getInitialState:function(){return{token:null,user:null,renderReady:!1,shop:null}},componentDidMount:function(){console.log("ShopBackoffice MONTADA!"),y?this.setToken(y):this.setState({renderReady:!0})},setToken:function(e){var t=this;e=e.token||e,console.log("Seteando token "+e);(0,f.default)({method:"get",url:"/api/v1/shopadm/myshop",headers:{Authorization:"Bearer "+e}}).then(function(n){console.log(n.data),t.setState({token:e,shop:n.data.shop,renderReady:!0})}).catch(console.error)},render:function(){var e=this;return console.log("RENDERING ShopBackoffice!"),this.state.renderReady?this.state.token?(console.log("window.location.hash: "+window.location.hash),"#/"==window.location.hash&&(console.log("REPLACING LOCATION"),window.location.replace("/shopadm#/index")),o.default.createElement(d.default,null,o.default.createElement("div",null,o.default.createElement(h.default,{onLogout:function(){return e.logoutForm.submit()}}),o.default.createElement(i.Route,{path:"/index",component:g.default}),o.default.createElement("form",{action:"/shopadm/logout",method:"POST",ref:function(t){return e.logoutForm=t},style:{display:"hidden"}})))):o.default.createElement(v.default,{onSubmit:this.setToken}):o.default.createElement("span",null,"Espere...")}});u.default.render(o.default.createElement(i.HashRouter,null,o.default.createElement(b,null)),document.getElementById("root"))}},[245]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,